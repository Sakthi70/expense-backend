### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Category {
  createdAt: DateTime
  id: String!
  isActive: Boolean!
  isDeleted: Boolean!
  name: String!
  subCategories: [SubCategory]
  updatedAt: DateTime
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Expense {
  amount: Float
  category: Category
  comment: String
  createdAt: DateTime
  extra: Float
  id: String!
  isActive: Boolean!
  isDeleted: Boolean!
  isLoan: Boolean!
  purchaseDate: Date
  quantity: Float
  subCategory: SubCategory
  subCategoryId: String!
  unitType: String
  updatedAt: DateTime
}

input ExpenseCreateInput {
  amount: Float!
  comment: String
  extra: Float!
  isLoan: Boolean!
  purchaseDate: Date
  quantity: Float!
  subCategoryId: String!
  unitType: String
}

input ExpenseUpDateInput {
  amount: Float
  comment: String
  extra: Float
  id: String
  isActive: Boolean
  isLoan: Boolean
  purchaseDate: Date
  quantity: Float
  subCategoryId: String
  unitType: String
}

type LabourTypes {
  amount: Float
  count: Int
  createdAt: DateTime
  id: String!
  isActive: Boolean!
  name: String!
  updatedAt: DateTime
}

type LabourWork {
  createdAt: DateTime
  id: String!
  isActive: Boolean!
  labourName: String
  labourType: LabourTypes
  labourTypeId: String!
  updatedAt: DateTime
  workedOn: Date
  workerCount: Float
}

type Loan {
  amount: Float
  createdAt: DateTime
  id: String!
  releseDate: Date
  updatedAt: DateTime
}

type Mutation {
  createCategory(name: String!): Category
  createExpense(data: ExpenseCreateInput!): Expense
  createLabourTypes(amount: Float!, name: String!): LabourTypes
  createLabourWork(data: [WorkerCountCreateInput!]): Int
  createLoan(amount: Float!, releaseDate: Date): Loan
  createSubCategory(categoryId: String!, name: String!): SubCategory
  createUnitType(name: String!): UnitTypes
  deleteCategory(id: String!): Category
  deleteExpense(id: String!): Expense
  deleteLabourTypes(id: String!): LabourTypes
  deleteLabourWork(date: Date!): Int
  deleteLoan(id: String!): Loan
  deleteSubCategory(id: String!): SubCategory
  deleteUnitType(id: String!): UnitTypes
  updateCategory(id: String!, isActive: Boolean, isDeleted: Boolean, name: String): Category
  updateExpense(data: ExpenseUpDateInput!): Expense
  updateLabourWork(id: String!, workerCount: Float!): LabourWork
  updateSubCategory(id: String!, isActive: Boolean, isDeleted: Boolean, name: String): SubCategory
}

type Query {
  allCategories(isDeleted: Boolean): [Category!]!
  allExpenses(isLoan: Boolean, subCategoryId: String): [Expense!]!
  allLabourTypes: [LabourTypes!]
  allLabourWorks(endDate: Date, startDate: Date): [LabourWork!]
  allLoanAmounts: [Loan!]
  allSubCategories(categoryId: String, isDeleted: Boolean): [SubCategory!]!
  allUnitTypes: [UnitTypes!]
  expenseById(id: String!): Expense!
}

type SubCategory {
  category: Category
  categoryId: String!
  count: Int
  createdAt: DateTime
  id: String!
  isActive: Boolean!
  isDeleted: Boolean!
  name: String!
  updatedAt: DateTime
}

type Subscription {
  expenseUpdated: Expense
  newExpense: Expense
}

type UnitTypes {
  createdAt: DateTime
  id: String!
  isActive: Boolean!
  name: String!
  updatedAt: DateTime
}

input WorkerCountCreateInput {
  labourTypeId: String!
  workedOn: Date
  workerCount: Float!
}